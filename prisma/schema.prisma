generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // TODO: Re-enable Accelerate once connection pool issue is resolved
  // url      = env("PRISMA_DATABASE_URL")
  // directUrl = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@unique([email, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  clients     Client[]
  contractors Contractor[]
  projects    Project[]
  tags        Tag[]
  users       User[]
}

model User {
  id                          String                      @id @default(cuid())
  name                        String?
  email                       String                      @unique
  emailVerified               DateTime?
  image                       String?
  password                    String?
  role                        UserRole                    @default(DESIGNER)
  orgId                       String?
  mustChangePassword          Boolean                     @default(false)
  approvalStatus              UserApprovalStatus          @default(PENDING)
  approvedAt                  DateTime?
  approvedBy                  String?
  createdAt                   DateTime                    @default(now())
  updatedAt                   DateTime                    @updatedAt
  accounts                    Account[]
  decidedApprovals            Approval[]                  @relation("DecidedByUser")
  sentApprovals               Approval[]                  @relation("SentByUser")
  assetPins                   AssetPin[]                  @relation("UserAssetPins")
  assetTags                   AssetTag[]                  @relation("UserAssetTags")
  chatMentions                ChatMention[]
  chatMessages                ChatMessage[]
  completedChecklists         ChecklistItem[]             @relation("ChecklistCompletedBy")
  createdChecklists           ChecklistItem[]             @relation("ChecklistCreatedBy")
  clientApprovalActivities    ClientApprovalActivity[]
  aaronApprovalVersions       ClientApprovalVersion[]     @relation("ClientApprovalAaronApprovedBy")
  sentClientApprovalVersions  ClientApprovalVersion[]     @relation("ClientApprovalSentBy")
  comments                    Comment[]
  commentLikes                CommentLike[]               @relation("UserCommentLikes")
  commentPins                 CommentPin[]                @relation("UserCommentPins")
  commentTags                 CommentTag[]                @relation("UserCommentTags")
  completedSections           DesignSection[]             @relation("CompletedByUserSection")
  createdSections             DesignSection[]             @relation("CreatedByUserSection")
  updatedSections             DesignSection[]             @relation("UpdatedByUserSection")
  createdFFEItems             FFEItem[]                   @relation("CreatedByUserFFE")
  updatedFFEItems             FFEItem[]                   @relation("UpdatedByUserFFE")
  createdFFEItemStatuses      FFEItemStatus[]             @relation("FFEItemStatusCreatedBy")
  updatedFFEItemStatuses      FFEItemStatus[]             @relation("FFEItemStatusUpdatedBy")
  floorplanApprovalActivities FloorplanApprovalActivity[]
  aaronFloorplanApprovals     FloorplanApprovalVersion[]  @relation("FloorplanAaronApprovedBy")
  sentFloorplanApprovals      FloorplanApprovalVersion[]  @relation("FloorplanSentBy")
  createdProjects             Project[]                   @relation("CreatedByUser")
  updatedProjects             Project[]                   @relation("UpdatedByUser")
  createdRooms                Room[]                      @relation("CreatedByUserRoom")
  updatedRooms                Room[]                      @relation("UpdatedByUserRoom")
  sessions                    Session[]
  assignedStages              Stage[]                     @relation("AssignedToUser")
  assignedTasks               ProjectUpdateTask[]         @relation("TaskAssignee")
  clientAccessTokens          ClientAccessToken[]         @relation("ClientAccessTokenCreatedBy")
  completedStages             Stage[]                     @relation("CompletedByUserStage")
  createdStages               Stage[]                     @relation("CreatedByUserStage")
  createdTasks                ProjectUpdateTask[]         @relation("TaskCreatedBy")
  renderingNotes              RenderingNote[]             @relation("RenderingNoteAuthor")
  updatedStages               Stage[]                     @relation("UpdatedByUserStage")
  uploadedAssets              Asset[]                     @relation("UploadedByUser")
  createdFFEInstances         RoomFFEInstance[]           @relation("RoomFFEInstanceCreatedBy")
  updatedFFEInstances         RoomFFEInstance[]           @relation("RoomFFEInstanceUpdatedBy")
  createdFFETemplates         FFETemplate[]               @relation("FFETemplateCreatedBy")
  updatedFFETemplates         FFETemplate[]               @relation("FFETemplateUpdatedBy")
  createdRenderingVersions    RenderingVersion[]          @relation("RenderingVersionCreatedBy")
  updatedRenderingVersions    RenderingVersion[]          @relation("RenderingVersionUpdatedBy")
  completedRenderingVersions  RenderingVersion[]          @relation("RenderingVersionCompletedBy")
  activityLogs                ActivityLog[]               @relation("ActivityLogActor")
  specBookGenerations         SpecBookGeneration[]        @relation("SpecBookGeneratedBy")
  activities                  Activity[]                  @relation("ActivityUser")
  reportedIssues              Issue[]                     @relation("IssueReporter")
  assignedIssues              Issue[]                     @relation("IssueAssignee")
  resolvedIssues              Issue[]                     @relation("IssueResolver")
  issueComments               IssueComment[]              @relation("IssueCommentAuthor")
  organization                Organization?               @relation(fields: [orgId], references: [id], onDelete: Cascade)
}

model Client {
  id           String       @id @default(cuid())
  name         String
  email        String
  phone        String?
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  company      String?
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  projects     Project[]

  @@unique([orgId, email])
}

model Contractor {
  id                 String              @id @default(cuid())
  businessName       String
  contactName        String?
  email              String
  phone              String?
  address            String?
  type               ContractorType      @default(CONTRACTOR)
  specialty          String?
  notes              String?
  isActive           Boolean             @default(true)
  orgId              String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organization       Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  projectContractors ProjectContractor[]
  projectUpdateTasks ProjectUpdateTask[]

  @@unique([orgId, email])
  @@index([orgId, type])
  @@index([orgId, isActive])
}

model ProjectContractor {
  id           String     @id @default(cuid())
  projectId    String
  contractorId String
  role         String?
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, contractorId])
  @@index([projectId])
  @@index([contractorId])
}

model Project {
  id                        String                     @id @default(cuid())
  name                      String
  description               String?
  type                      ProjectType                @default(RESIDENTIAL)
  status                    ProjectStatus              @default(DRAFT)
  clientId                  String
  dueDate                   DateTime?
  budget                    Float?
  dropboxFolder             String?
  orgId                     String
  createdById               String
  updatedById               String?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  coverImages               Json?
  address                   String?
  streetAddress             String?
  city                      String?
  postalCode                String?
  hasFloorplanApproval      Boolean                    @default(false)
  hasSpecBook               Boolean                    @default(false)
  hasProjectUpdates         Boolean                    @default(false)
  approvals                 Approval[]
  assets                    Asset[]                    @relation("ProjectAssets")
  comments                  Comment[]
  floorplanApprovalVersions FloorplanApprovalVersion[]
  client                    Client                     @relation(fields: [clientId], references: [id])
  createdBy                 User                       @relation("CreatedByUser", fields: [createdById], references: [id])
  organization              Organization               @relation(fields: [orgId], references: [id], onDelete: Cascade)
  updatedBy                 User?                      @relation("UpdatedByUser", fields: [updatedById], references: [id])
  projectContractors        ProjectContractor[]
  rooms                     Room[]
  roomSections              RoomSection[]
  specBooks                 SpecBook[]
  clientAccessTokens        ClientAccessToken[] @relation("ClientAccessTokenProject")
  issues                    Issue[]             @relation("IssueProject")
}

model RoomSection {
  id        String   @id @default(cuid())
  projectId String
  name      String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rooms     Room[]

  @@index([projectId])
  @@index([projectId, order])
}

model Room {
  id              String          @id @default(cuid())
  projectId       String
  sectionId       String?
  type            RoomType
  name            String?
  order           Int             @default(0)
  status          RoomStatus      @default(NOT_STARTED)
  currentStage    String?
  progressFFE     Int             @default(0)
  createdById     String?
  updatedById     String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  approvals       Approval[]
  assets          Asset[]         @relation("RoomAssets")
  comments        Comment[]
  ffeItems        FFEItem[]
  ffeItemStatuses FFEItemStatus[]
  createdBy       User?           @relation("CreatedByUserRoom", fields: [createdById], references: [id])
  project         Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  section         RoomSection?    @relation(fields: [sectionId], references: [id], onDelete: SetNull)
  projectUpdateTasks ProjectUpdateTask[]
  specBookSections SpecBookSection[]
  updatedBy       User?           @relation("UpdatedByUserRoom", fields: [updatedById], references: [id])
  stages          Stage[]
  ffeInstance     RoomFFEInstance? @relation("RoomFFEInstance")
  renderingVersions RenderingVersion[] @relation("RoomRenderingVersions")
  issues          Issue[]          @relation("IssueRoom")

  @@index([projectId])
  @@index([sectionId])
  @@index([projectId, order])
}

model Stage {
  id                     String                  @id @default(cuid())
  roomId                 String
  type                   StageType
  status                 StageStatus             @default(NOT_STARTED)
  assignedTo             String?
  dueDate                DateTime?
  startedAt              DateTime?
  completedAt            DateTime?
  createdById            String?
  updatedById            String?
  completedById          String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  assets                 Asset[]                 @relation("StageAssets")
  chatMessages           ChatMessage[]
  clientApprovalVersions ClientApprovalVersion[]
  comments               Comment[]
  designSections         DesignSection[]
  assignedUser           User?                   @relation("AssignedToUser", fields: [assignedTo], references: [id])
  completedBy            User?                   @relation("CompletedByUserStage", fields: [completedById], references: [id])
  createdBy              User?                   @relation("CreatedByUserStage", fields: [createdById], references: [id])
  room                   Room                    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedBy              User?                   @relation("UpdatedByUserStage", fields: [updatedById], references: [id])
  renderingVersions      RenderingVersion[]      @relation("StageRenderingVersions")
  issues                 Issue[]                 @relation("IssueStage")

  @@unique([roomId, type])
}

model DesignSection {
  id             String            @id @default(cuid())
  stageId        String
  type           DesignSectionType
  content        String?
  completed      Boolean           @default(false)
  createdById    String?
  updatedById    String?
  completedById  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assets         Asset[]           @relation("SectionAssets")
  checklistItems ChecklistItem[]
  comments       Comment[]
  completedBy    User?             @relation("CompletedByUserSection", fields: [completedById], references: [id])
  createdBy      User?             @relation("CreatedByUserSection", fields: [createdById], references: [id])
  stage          Stage             @relation(fields: [stageId], references: [id], onDelete: Cascade)
  updatedBy      User?             @relation("UpdatedByUserSection", fields: [updatedById], references: [id])

  @@unique([stageId, type])
}

model Tag {
  id           String       @id @default(cuid())
  name         String
  type         TagType      @default(CUSTOM)
  color        String?
  description  String?
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assetTags    AssetTag[]
  commentTags  CommentTag[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, name])
  @@index([orgId])
}

model AssetTag {
  id        String   @id @default(cuid())
  assetId   String
  tagId     String
  userId    String
  createdAt DateTime @default(now())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation("UserAssetTags", fields: [userId], references: [id])

  @@unique([assetId, tagId])
  @@index([assetId])
  @@index([tagId])
}

model CommentTag {
  id        String   @id @default(cuid())
  commentId String
  tagId     String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentTags", fields: [userId], references: [id])

  @@unique([commentId, tagId])
  @@index([commentId])
  @@index([tagId])
}

model AssetPin {
  id        String   @id @default(cuid())
  assetId   String   @unique
  userId    String
  createdAt DateTime @default(now())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user      User     @relation("UserAssetPins", fields: [userId], references: [id])

  @@index([assetId])
}

model CommentPin {
  id        String   @id @default(cuid())
  commentId String   @unique
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentPins", fields: [userId], references: [id])

  @@index([commentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@index([commentId])
}

model ChecklistItem {
  id            String        @id @default(cuid())
  sectionId     String
  title         String
  description   String?
  completed     Boolean       @default(false)
  order         Int           @default(0)
  createdById   String
  completedById String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
  completedBy   User?         @relation("ChecklistCompletedBy", fields: [completedById], references: [id])
  createdBy     User          @relation("ChecklistCreatedBy", fields: [createdById], references: [id])
  section       DesignSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([order])
}

model FFEItem {
  id           String    @id @default(cuid())
  roomId       String
  name         String
  status       FFEStatus @default(NOT_STARTED)
  supplierLink String?
  notes        String?
  price        Float?
  leadTime     String?
  category     String?
  createdById  String?
  updatedById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assets       Asset[]   @relation("FFEItemAssets")
  comments     Comment[]
  createdBy    User?     @relation("CreatedByUserFFE", fields: [createdById], references: [id])
  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedBy    User?     @relation("UpdatedByUserFFE", fields: [updatedById], references: [id])
}

model FFEItemStatus {
  id               String    @id @default(cuid())
  roomId           String
  itemId           String
  state            String    @default("pending")
  selectionType    String?
  isCustomExpanded Boolean   @default(false)
  subItemStates    Json?     @default("{}")
  customOptions    Json?
  standardProduct  Json?
  notes            String?
  confirmedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  createdById      String
  updatedById      String
  createdBy        User      @relation("FFEItemStatusCreatedBy", fields: [createdById], references: [id])
  room             Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedBy        User      @relation("FFEItemStatusUpdatedBy", fields: [updatedById], references: [id])

  @@unique([roomId, itemId])
  @@index([roomId])
  @@index([itemId])
  @@index([state])
  @@index([selectionType])
}

model ClientApprovalVersion {
  id                  String                    @id @default(cuid())
  stageId             String
  renderingVersionId  String?                   @unique
  version             String
  status              ClientApprovalStageStatus @default(DRAFT)
  approvedByAaron     Boolean                   @default(false)
  aaronApprovedAt     DateTime?
  aaronApprovedById   String?
  sentToClientAt      DateTime?
  sentById            String?
  emailOpenedAt       DateTime?
  followUpCompletedAt DateTime?
  followUpNotes       String?
  clientDecision      ApprovalStatus?           @default(PENDING)
  clientDecidedAt     DateTime?
  clientMessage       String?
  notes               String?
  followUpSentAt      DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  activityLogs        ClientApprovalActivity[]
  assets              ClientApprovalAsset[]
  emailLogs           ClientApprovalEmailLog[]
  emailLogsGeneric    EmailLog[]                @relation("EmailLogs")
  aaronApprovedBy     User?                     @relation("ClientApprovalAaronApprovedBy", fields: [aaronApprovedById], references: [id])
  renderingVersion    RenderingVersion?         @relation(fields: [renderingVersionId], references: [id])
  sentBy              User?                     @relation("ClientApprovalSentBy", fields: [sentById], references: [id])
  stage               Stage                     @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model ClientApprovalAsset {
  id             String                @id @default(cuid())
  versionId      String
  assetId        String
  includeInEmail Boolean               @default(true)
  displayOrder   Int                   @default(0)
  createdAt      DateTime              @default(now())
  asset          Asset                 @relation(fields: [assetId], references: [id], onDelete: Cascade)
  version        ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, assetId])
}

model ClientApprovalEmailLog {
  id              String                @id @default(cuid())
  versionId       String
  to              String
  subject         String
  htmlContent     String
  sentAt          DateTime              @default(now())
  openedAt        DateTime?
  clickedAt       DateTime?
  followUpSentAt  DateTime?
  trackingPixelId String                @unique
  version         ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model ClientApprovalActivity {
  id        String                @id @default(cuid())
  versionId String
  type      String
  message   String
  userId    String?
  metadata  String?
  createdAt DateTime              @default(now())
  user      User?                 @relation(fields: [userId], references: [id])
  version   ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model FloorplanApprovalVersion {
  id                  String                      @id @default(cuid())
  projectId           String
  version             String
  status              FloorplanApprovalStatus     @default(DRAFT)
  approvedByAaron     Boolean                     @default(false)
  aaronApprovedAt     DateTime?
  aaronApprovedById   String?
  sentToClientAt      DateTime?
  sentById            String?
  emailOpenedAt       DateTime?
  followUpCompletedAt DateTime?
  followUpNotes       String?
  clientDecision      ApprovalStatus?             @default(PENDING)
  clientDecidedAt     DateTime?
  clientMessage       String?
  notes               String?
  followUpSentAt      DateTime?
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  activityLogs        FloorplanApprovalActivity[]
  assets              FloorplanApprovalAsset[]
  emailLogs           FloorplanApprovalEmailLog[]
  aaronApprovedBy     User?                       @relation("FloorplanAaronApprovedBy", fields: [aaronApprovedById], references: [id])
  project             Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sentBy              User?                       @relation("FloorplanSentBy", fields: [sentById], references: [id])

  @@unique([projectId, version])
  @@index([projectId])
  @@index([status])
  @@index([createdAt])
}

model FloorplanApprovalAsset {
  id             String                   @id @default(cuid())
  versionId      String
  assetId        String
  includeInEmail Boolean                  @default(true)
  displayOrder   Int                      @default(0)
  createdAt      DateTime                 @default(now())
  asset          Asset                    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  version        FloorplanApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, assetId])
  @@index([versionId])
  @@index([assetId])
}

model FloorplanApprovalEmailLog {
  id              String                   @id @default(cuid())
  versionId       String
  to              String
  subject         String
  htmlContent     String
  sentAt          DateTime                 @default(now())
  openedAt        DateTime?
  clickedAt       DateTime?
  followUpSentAt  DateTime?
  trackingPixelId String                   @unique
  version         FloorplanApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId])
  @@index([sentAt])
}

model FloorplanApprovalActivity {
  id        String                   @id @default(cuid())
  versionId String
  type      String
  message   String
  userId    String?
  metadata  String?
  createdAt DateTime                 @default(now())
  user      User?                    @relation(fields: [userId], references: [id])
  version   FloorplanApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId])
  @@index([createdAt])
}

model Approval {
  id             String         @id @default(cuid())
  projectId      String?
  roomId         String?
  token          String         @unique @default(cuid())
  status         ApprovalStatus @default(PENDING)
  sentById       String?
  decidedById    String?
  sentAt         DateTime?
  decidedAt      DateTime?
  message        String?
  revisionReason String?
  expiresAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  decidedBy      User?          @relation("DecidedByUser", fields: [decidedById], references: [id])
  project        Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room           Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sentBy         User?          @relation("SentByUser", fields: [sentById], references: [id])
  assets         Asset[]
  comments       Comment[]
}

model Comment {
  id           String         @id @default(cuid())
  content      String
  authorId     String
  projectId    String?
  roomId       String?
  stageId      String?
  sectionId    String?
  ffeItemId    String?
  approvalId   String?
  mentions     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  approval     Approval?      @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  author       User           @relation(fields: [authorId], references: [id])
  ffeItem      FFEItem?       @relation(fields: [ffeItemId], references: [id], onDelete: Cascade)
  project      Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room         Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  section      DesignSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  stage        Stage?         @relation(fields: [stageId], references: [id], onDelete: Cascade)
  commentLikes CommentLike[]
  commentPin   CommentPin?
  commentTags  CommentTag[]
}

model ChatMessage {
  id        String        @id @default(cuid())
  content   String
  authorId  String
  stageId   String
  editedAt  DateTime?
  isEdited  Boolean       @default(false)
  deletedAt DateTime?
  isDeleted Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  mentions  ChatMention[]
  author    User          @relation(fields: [authorId], references: [id])
  stage     Stage         @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@index([stageId, createdAt])
  @@index([authorId])
}

model ChatMention {
  id            String      @id @default(cuid())
  messageId     String
  mentionedId   String
  createdAt     DateTime    @default(now())
  mentionedUser User        @relation(fields: [mentionedId], references: [id])
  message       ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, mentionedId])
}

model Asset {
  id                      String                   @id @default(cuid())
  title                   String
  filename                String?
  url                     String
  type                    AssetType
  size                    Int?
  mimeType                String?
  provider                String?
  metadata                String?
  description             String?
  userDescription         String?
  uploadedBy              String
  orgId                   String
  projectId               String?
  roomId                  String?
  stageId                 String?
  sectionId               String?
  ffeItemId               String?
  approvalId              String?
  commentId               String?
  renderingVersionId      String?
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  drawingChecklistItemId  String?
  approval                Approval?                @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  ffeItem                 FFEItem?                 @relation("FFEItemAssets", fields: [ffeItemId], references: [id], onDelete: Cascade)
  project                 Project?                 @relation("ProjectAssets", fields: [projectId], references: [id], onDelete: Cascade)
  renderingVersion        RenderingVersion?        @relation("RenderingAssets", fields: [renderingVersionId], references: [id], onDelete: Cascade)
  room                    Room?                    @relation("RoomAssets", fields: [roomId], references: [id], onDelete: Cascade)
  section                 DesignSection?           @relation("SectionAssets", fields: [sectionId], references: [id], onDelete: Cascade)
  stage                   Stage?                   @relation("StageAssets", fields: [stageId], references: [id], onDelete: Cascade)
  uploadedByUser          User                     @relation("UploadedByUser", fields: [uploadedBy], references: [id])
  drawingChecklistItem    DrawingChecklistItem?    @relation("DrawingChecklistAssets", fields: [drawingChecklistItemId], references: [id], onDelete: Cascade)
  assetPin                AssetPin?
  assetTags               AssetTag[]
  clientApprovalAssets    ClientApprovalAsset[]
  floorplanApprovalAssets FloorplanApprovalAsset[]
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  relatedId   String?
  relatedType String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model NotificationSend {
  id              String   @id @default(cuid())
  eventType       String
  stageId         String
  recipientUserId String
  actorUserId     String
  messageId       String?
  status          String   @default("SENT")
  errorMessage    String?
  customMessage   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([eventType, stageId, recipientUserId])
  @@index([stageId])
  @@index([recipientUserId])
  @@index([eventType])
}

model RoomPreset {
  id          String   @id @default(cuid())
  roomType    RoomType
  name        String
  description String?
  ffeItems    String
  sections    String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomType, name])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  assignedTo  String?
  projectId   String?
  roomId      String?
  stageId     String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  ipAddress String?
  userAgent String?
  lastSeen  DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, deviceId])
}

model EmailLog {
  id             String    @id @default(cuid())
  versionId      String
  to             String
  subject        String
  html           String
  sentAt         DateTime  @default(now())
  openedAt       DateTime?
  type           String
  metadata       Json?
  deliveryStatus String?   @default("PENDING")
  deliveryError  String?
  providerId     String?
  provider       String?
  deliveredAt    DateTime?
  version        ClientApprovalVersion @relation("EmailLogs", fields: [versionId], references: [id], onDelete: Cascade)
}

model ClientApproval {
  id         String   @id @default(cuid())
  versionId  String
  approvedBy String
  approvedAt DateTime @default(now())
  decision   String
  comments   String?
}

model Activity {
  id        String   @id @default(cuid())
  stageId   String
  type      String
  message   String
  userId    String?
  timestamp DateTime @default(now())
  user      User?    @relation("ActivityUser", fields: [userId], references: [id])
}

model RenderingVersion {
  id                    String                 @id @default(cuid())
  roomId                String
  stageId               String
  version               String
  customName            String?
  status                RenderingVersionStatus @default(IN_PROGRESS)
  pushedToClientAt      DateTime?
  createdById           String
  updatedById           String?
  completedById         String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  completedAt           DateTime?
  assets                Asset[]                @relation("RenderingAssets")
  notes                 RenderingNote[]
  clientApprovalVersion ClientApprovalVersion?
  room                  Room                   @relation("RoomRenderingVersions", fields: [roomId], references: [id], onDelete: Cascade)
  stage                 Stage                  @relation("StageRenderingVersions", fields: [stageId], references: [id], onDelete: Cascade)
  createdBy             User                   @relation("RenderingVersionCreatedBy", fields: [createdById], references: [id])
  updatedBy             User?                  @relation("RenderingVersionUpdatedBy", fields: [updatedById], references: [id])
  completedBy           User?                  @relation("RenderingVersionCompletedBy", fields: [completedById], references: [id])

  @@unique([roomId, version])
  @@index([stageId])
  @@index([createdAt])
}

model RenderingNote {
  id        String   @id @default(cuid())
  versionId String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User             @relation("RenderingNoteAuthor", fields: [authorId], references: [id])
  version   RenderingVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId])
  @@index([createdAt])
}

model DrawingChecklistItem {
  id          String               @id @default(cuid())
  stageId     String
  type        DrawingChecklistType
  name        String
  description String?
  completed   Boolean              @default(false)
  order       Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  completedAt DateTime?
  assets      Asset[]              @relation("DrawingChecklistAssets")

  @@unique([stageId, type])
  @@index([stageId])
  @@index([order])
}

model ActivityLog {
  id        String   @id @default(cuid())
  actorId   String?
  action    String
  entity    String
  entityId  String
  details   Json?
  ipAddress String?
  orgId     String?
  createdAt DateTime @default(now())
  actor     User?    @relation("ActivityLogActor", fields: [actorId], references: [id])

  @@index([actorId])
  @@index([orgId])
  @@index([entity, entityId])
  @@index([createdAt])
}

model ClientAccessToken {
  id             String    @id @default(cuid())
  projectId      String
  token          String    @unique @default(cuid())
  name           String?
  specsUrl       String?
  active         Boolean   @default(true)
  expiresAt      DateTime?
  createdById    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?
  accessCount    Int       @default(0)
  lastAccessedIP String?
  accessLogs     ClientAccessLog[]
  project        Project   @relation("ClientAccessTokenProject", fields: [projectId], references: [id], onDelete: Cascade)
  createdBy      User      @relation("ClientAccessTokenCreatedBy", fields: [createdById], references: [id])

  @@index([projectId])
  @@index([token])
  @@index([active])
  @@index([expiresAt])
}

model ClientAccessLog {
  id        String   @id @default(cuid())
  tokenId   String
  ipAddress String?
  userAgent String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())
  token     ClientAccessToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([createdAt])
  @@index([action])
}

model PhaseAccessToken {
  id             String    @id @default(cuid())
  stageId        String
  token          String    @unique @default(cuid())
  name           String?
  active         Boolean   @default(true)
  expiresAt      DateTime?
  createdById    String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?
  accessCount    Int       @default(0)
  lastAccessedIP String?

  @@index([stageId])
  @@index([token])
  @@index([active])
  @@index([expiresAt])
}

model PhaseAccessLog {
  id        String   @id @default(cuid())
  tokenId   String
  ipAddress String?
  userAgent String?
  action    String
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([tokenId])
  @@index([createdAt])
  @@index([action])
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String
  type        IssueType     @default(GENERAL)
  priority    IssuePriority @default(MEDIUM)
  status      IssueStatus   @default(OPEN)
  reportedBy  String
  assignedTo  String?
  resolvedBy  String?
  orgId       String?
  projectId   String?
  roomId      String?
  stageId     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?
  closedAt    DateTime?
  metadata    Json?
  
  reporter    User          @relation("IssueReporter", fields: [reportedBy], references: [id])
  assignee    User?         @relation("IssueAssignee", fields: [assignedTo], references: [id])
  resolver    User?         @relation("IssueResolver", fields: [resolvedBy], references: [id])
  project     Project?      @relation("IssueProject", fields: [projectId], references: [id], onDelete: Cascade)
  room        Room?         @relation("IssueRoom", fields: [roomId], references: [id], onDelete: Cascade)
  stage       Stage?        @relation("IssueStage", fields: [stageId], references: [id], onDelete: Cascade)
  comments    IssueComment[]

  @@index([reportedBy])
  @@index([assignedTo])
  @@index([status])
  @@index([createdAt])
  @@index([orgId])
  @@index([projectId])
  @@index([roomId])
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author    User     @relation("IssueCommentAuthor", fields: [authorId], references: [id])

  @@index([issueId])
  @@index([createdAt])
}

model FFELibraryItem {
  id                 String   @id @default(cuid())
  orgId              String
  itemId             String
  name               String
  category           String
  roomTypes          String[]
  isRequired         Boolean  @default(false)
  itemType           String   @default("base")
  hasStandardOption  Boolean  @default(false)
  hasCustomOption    Boolean  @default(false)
  standardConfig     Json?
  customConfig       Json?
  dependsOn          String[]
  showWhen           Json?
  isStandard         Boolean  @default(true)
  subItems           Json?
  notes              String?
  addedFromProjectId String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdById        String
  updatedById        String

  @@unique([orgId, itemId])
  @@index([orgId])
  @@index([category])
  @@index([roomTypes], type: Gin)
  @@index([itemType])
}

model FFEGeneralSettings {
  id          String   @id @default(cuid())
  orgId       String   @unique
  roomType    String
  settings    Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String

  @@unique([orgId, roomType])
  @@index([orgId])
  @@index([roomType])
}

model FFEAuditLog {
  id        String   @id @default(cuid())
  roomId    String
  itemId    String
  action    String
  oldValue  String?
  newValue  String?
  notes     String?
  userId    String
  createdAt DateTime @default(now())

  @@index([roomId])
  @@index([itemId])
  @@index([userId])
  @@index([createdAt])
}

model FFEBathroomState {
  id                   String   @id @default(cuid())
  roomId               String   @unique
  categorySelections   String   @default("[]")
  itemStatuses         String   @default("[]")
  completionPercentage Float    @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  createdById          String
  updatedById          String

  @@index([roomId])
  @@index([completionPercentage])
}

model FFETemplate {
  id          String            @id @default(cuid())
  orgId       String
  name        String
  description String?
  status      FFETemplateStatus @default(DRAFT)
  isDefault   Boolean           @default(false)
  version     Int               @default(1)
  tags        String[]
  metadata    Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdById String
  updatedById String
  sections    FFETemplateSection[] @relation("TemplateToSections")
  instances   RoomFFEInstance[] @relation("RoomFFEInstanceTemplate")
  createdBy   User @relation("FFETemplateCreatedBy", fields: [createdById], references: [id])
  updatedBy   User @relation("FFETemplateUpdatedBy", fields: [updatedById], references: [id])

  @@unique([orgId, name], name: "unique_template_per_org")
  @@index([orgId])
  @@index([status])
}

model FFETemplateSection {
  id            String   @id @default(cuid())
  templateId    String
  name          String
  description   String?
  order         Int      @default(0)
  isRequired    Boolean  @default(false)
  isCollapsible Boolean  @default(true)
  icon          String?
  color         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  template      FFETemplate @relation("TemplateToSections", fields: [templateId], references: [id], onDelete: Cascade)
  items         FFETemplateItem[] @relation("SectionToItems")

  @@index([templateId, order])
}

model FFETemplateItem {
  id            String       @id @default(cuid())
  sectionId     String
  name          String
  description   String?
  defaultState  FFEItemState @default(PENDING)
  isRequired    Boolean      @default(false)
  order         Int          @default(0)
  category      String?
  tags          String[]
  estimatedCost Decimal?
  leadTimeWeeks Int?
  supplierInfo  Json?
  customFields  Json?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  section       FFETemplateSection @relation("SectionToItems", fields: [sectionId], references: [id], onDelete: Cascade)
  roomItems     RoomFFEItem[] @relation("RoomFFEItemTemplate")

  @@index([sectionId, order])
  @@index([isRequired])
}

model RoomFFEInstance {
  id                   String            @id @default(cuid())
  roomId               String            @unique
  templateId           String?
  name                 String
  status               FFEInstanceStatus @default(NOT_STARTED)
  progress             Decimal           @default(0)
  estimatedBudget      Decimal?
  actualBudget         Decimal?
  targetCompletionDate DateTime?
  actualCompletionDate DateTime?
  notes                String?
  metadata             Json?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  createdById          String
  updatedById          String
  template             FFETemplate?      @relation("RoomFFEInstanceTemplate", fields: [templateId], references: [id])
  room                 Room              @relation("RoomFFEInstance", fields: [roomId], references: [id], onDelete: Cascade)
  sections             RoomFFESection[]  @relation("RoomFFEInstanceSections")
  createdBy            User              @relation("RoomFFEInstanceCreatedBy", fields: [createdById], references: [id])
  updatedBy            User              @relation("RoomFFEInstanceUpdatedBy", fields: [updatedById], references: [id])

  @@index([roomId])
  @@index([templateId])
  @@index([status])
}

model RoomFFESection {
  id                String    @id @default(cuid())
  instanceId        String
  templateSectionId String?
  name              String
  description       String?
  order             Int       @default(0)
  isExpanded        Boolean   @default(true)
  isCompleted       Boolean   @default(false)
  completedAt       DateTime?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  instance          RoomFFEInstance @relation("RoomFFEInstanceSections", fields: [instanceId], references: [id], onDelete: Cascade)
  items             RoomFFEItem[] @relation("RoomFFESectionItems")

  @@index([instanceId, order])
}

model RoomFFEItem {
  id             String            @id @default(cuid())
  sectionId      String
  templateItemId String?
  name           String
  description    String?
  state          FFEItemState      @default(PENDING)
  visibility     FFEItemVisibility @default(HIDDEN)
  isRequired     Boolean           @default(false)
  isCustom       Boolean           @default(false)
  order          Int               @default(0)
  quantity       Int               @default(1)
  unitCost       Decimal?
  totalCost      Decimal?
  supplierName   String?
  supplierLink   String?
  modelNumber    String?
  notes          String?
  completedAt    DateTime?
  completedById  String?
  attachments    Json?
  customFields   Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  createdById    String
  updatedById    String
  section        RoomFFESection @relation("RoomFFESectionItems", fields: [sectionId], references: [id], onDelete: Cascade)
  templateItem   FFETemplateItem? @relation("RoomFFEItemTemplate", fields: [templateItemId], references: [id])

  @@index([sectionId, order])
  @@index([state])
  @@index([visibility])
  @@index([sectionId, visibility])
  @@index([isRequired])
}

model FFEChangeLog {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  fieldName  String?
  oldValue   String?
  newValue   String?
  userId     String
  orgId      String
  roomId     String?
  instanceId String?
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([entityType, entityId])
  @@index([userId, createdAt])
  @@index([orgId, createdAt])
}

model FFESectionLibrary {
  id                  String     @id @default(cuid())
  name                String     @unique
  description         String?
  icon                String?
  color               String?
  defaultOrder        Int        @default(0)
  applicableRoomTypes RoomType[]
  isGlobal            Boolean    @default(true)
  createdAt           DateTime   @default(now())
}

model ProjectUpdate {
  id             String                @id @default(cuid())
  projectId      String
  roomId         String?
  authorId       String
  type           ProjectUpdateType     @default(GENERAL)
  category       ProjectUpdateCategory @default(GENERAL)
  status         ProjectUpdateStatus   @default(ACTIVE)
  priority       PriorityLevel         @default(MEDIUM)
  title          String?
  description    String?
  location       String?
  gpsCoordinates Json?
  metadata       Json?
  dueDate        DateTime?
  completedAt    DateTime?
  completedById  String?
  estimatedCost  Decimal?
  actualCost     Decimal?
  timeEstimated  Int?
  timeLogged     Int?
  parentUpdateId String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  tasks          ProjectUpdateTask[]

  @@index([projectId, createdAt])
  @@index([roomId])
  @@index([status])
  @@index([priority])
}

model ProjectUpdatePhoto {
  id                String    @id @default(cuid())
  updateId          String
  assetId           String
  caption           String?
  gpsCoordinates    Json?
  takenAt           DateTime?
  beforeAfterPairId String?   @unique
  tags              String[]
  roomArea          String?
  tradeCategory     String?
  isBeforePhoto     Boolean   @default(false)
  isAfterPhoto      Boolean   @default(false)
  annotationsData   Json?
  aiAnalysis        Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@index([updateId])
  @@index([takenAt])
  @@index([tradeCategory])
}

model ProjectUpdateTask {
  id             String        @id @default(cuid())
  updateId       String?
  projectId      String
  roomId         String?
  title          String
  description    String?
  status         TaskStatus    @default(TODO)
  priority       PriorityLevel @default(MEDIUM)
  assigneeId     String?
  contractorId   String?
  tradeType      String?
  estimatedHours Decimal?
  actualHours    Decimal?
  estimatedCost  Decimal?
  actualCost     Decimal?
  materials      Json?
  dependencies   String[]
  dueDate        DateTime?
  startedAt      DateTime?
  completedAt    DateTime?
  createdById    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assignee       User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assignments    ContractorAssignment[]
  contractor     Contractor?   @relation(fields: [contractorId], references: [id])
  createdBy      User          @relation("TaskCreatedBy", fields: [createdById], references: [id])
  messages       ProjectUpdateMessage[]
  room           Room?         @relation(fields: [roomId], references: [id])
  update         ProjectUpdate? @relation(fields: [updateId], references: [id])

  @@index([projectId, status])
  @@index([assigneeId])
  @@index([contractorId])
  @@index([dueDate])
}

model ProjectUpdateDocument {
  id                  String         @id @default(cuid())
  updateId            String
  assetId             String
  documentType        DocumentType   @default(OTHER)
  version             String
  isCurrentVersion    Boolean        @default(true)
  changesFromPrevious String?
  approvalStatus      ApprovalStatus @default(PENDING)
  approvedById        String?
  approvedAt          DateTime?
  expiresAt           DateTime?
  distributionList    Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt

  @@index([updateId])
  @@index([documentType])
  @@index([approvalStatus])
}

model ProjectUpdateMessage {
  id              String        @id @default(cuid())
  updateId        String
  taskId          String?
  authorId        String
  content         String
  messageType     MessageType   @default(MESSAGE)
  priority        PriorityLevel @default(NORMAL)
  parentMessageId String?
  mentions        String[]
  attachments     Json?
  readBy          Json?
  reactions       Json?
  isUrgent        Boolean       @default(false)
  scheduledFor    DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  task            ProjectUpdateTask? @relation(fields: [taskId], references: [id])

  @@index([updateId, createdAt])
  @@index([taskId])
  @@index([authorId])
}

model ProjectUpdateActivity {
  id          String   @id @default(cuid())
  updateId    String?
  projectId   String
  actorId     String?
  actionType  String
  entityType  String
  entityId    String
  description String
  metadata    Json?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())

  @@index([projectId, createdAt])
  @@index([entityType, entityId])
}

model ContractorAssignment {
  id                 String             @id @default(cuid())
  projectId          String
  contractorId       String
  updateId           String?
  taskId             String?
  role               String
  status             AssignmentStatus   @default(ASSIGNED)
  notificationMethod NotificationMethod @default(EMAIL)
  lastNotifiedAt     DateTime?
  acknowledgedAt     DateTime?
  completedAt        DateTime?
  notes              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  task               ProjectUpdateTask? @relation(fields: [taskId], references: [id])

  @@index([projectId])
  @@index([contractorId])
  @@index([status])
}

model ProjectMilestone {
  id                  String          @id @default(cuid())
  projectId           String
  updateId            String?
  name                String
  description         String?
  type                MilestoneType   @default(CUSTOM)
  status              MilestoneStatus @default(PENDING)
  percentage          Decimal         @default(0)
  targetDate          DateTime?
  actualDate          DateTime?
  dependencies        String[]
  celebrateWithClient Boolean         @default(false)
  autoGenerateReport  Boolean         @default(true)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@index([projectId])
  @@index([status])
}

model SpecBook {
  id          String   @id @default(cuid())
  projectId   String
  name        String
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  updatedById String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sections    SpecBookSection[]
  generations SpecBookGeneration[] @relation("SpecBookGenerations")

  @@index([projectId])
  @@index([isActive])
}

model SpecBookSection {
  id           String              @id @default(cuid())
  specBookId   String
  type         SpecBookSectionType
  name         String
  description  String?
  roomId       String?
  order        Int                 @default(0)
  isIncluded   Boolean             @default(true)
  renderingUrl String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  dropboxFiles DropboxFileLink[]
  room         Room?               @relation(fields: [roomId], references: [id], onDelete: Cascade)
  specBook     SpecBook            @relation(fields: [specBookId], references: [id], onDelete: Cascade)

  @@unique([specBookId, type, roomId])
  @@index([specBookId, order])
  @@index([type])
  @@index([roomId])
}

model DropboxFileLink {
  id               String    @id @default(cuid())
  sectionId        String
  dropboxPath      String
  dropboxFileId    String?
  fileName         String
  fileSize         Int?
  lastModified     DateTime?
  dropboxRevision  String?
  cadToPdfCacheUrl String?
  uploadedPdfUrl   String?   // Direct PDF upload URL (alternative to Dropbox)
  cacheExpiry      DateTime?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  section          SpecBookSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@unique([sectionId, dropboxPath])
  @@index([sectionId])
  @@index([dropboxPath])
  @@index([dropboxRevision])
}

model SpecBookGeneration {
  id               String            @id @default(cuid())
  specBookId       String
  version          String
  status           SpecBookGenStatus @default(GENERATING)
  pdfUrl           String?
  fileSize         Int?
  pageCount        Int?
  sectionsIncluded Json
  roomsIncluded    Json
  coverPageData    Json
  errorMessage     String?
  generatedById    String
  generatedAt      DateTime          @default(now())
  completedAt      DateTime?
  downloadedAt     DateTime?
  downloadCount    Int               @default(0)
  specBook         SpecBook          @relation("SpecBookGenerations", fields: [specBookId], references: [id], onDelete: Cascade)
  generatedBy      User              @relation("SpecBookGeneratedBy", fields: [generatedById], references: [id])

  @@index([specBookId, generatedAt])
  @@index([status])
  @@index([generatedAt])
}

model CadPreferences {
  id               String   @id @default(cuid())
  linkedFileId     String   @unique
  projectId        String
  layoutName       String?
  ctbDropboxPath   String?
  ctbFileId        String?
  plotArea         String   @default("extents")
  window           Json?
  centerPlot       Boolean  @default(true)
  scaleMode        String   @default("fit")
  scaleDenominator Int?
  keepAspectRatio  Boolean  @default(true)
  margins          Json?    @default("{\"top\": 10, \"left\": 10, \"right\": 10, \"bottom\": 10}")
  paperSize        String?  @default("Auto")
  orientation      String?
  dpi              Int?     @default(300)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([linkedFileId])
  @@index([projectId])
}

model ProjectCadDefaults {
  id               String   @id @default(cuid())
  projectId        String   @unique
  layoutName       String?
  ctbDropboxPath   String?
  ctbFileId        String?
  plotArea         String   @default("extents")
  window           Json?
  centerPlot       Boolean  @default(true)
  scaleMode        String   @default("fit")
  scaleDenominator Int?
  keepAspectRatio  Boolean  @default(true)
  margins          Json?    @default("{\"top\": 10, \"left\": 10, \"right\": 10, \"bottom\": 10}")
  paperSize        String?  @default("Auto")
  orientation      String?
  dpi              Int?     @default(300)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([projectId])
}

model CadLayoutCache {
  id              String   @id @default(cuid())
  dropboxPath     String
  dropboxRevision String
  layouts         Json
  discoveredAt    DateTime @default(now())
  expiresAt       DateTime

  @@unique([dropboxPath, dropboxRevision])
  @@index([dropboxPath])
  @@index([expiresAt])
}

enum UserRole {
  OWNER
  ADMIN
  DESIGNER
  RENDERER
  DRAFTER
  FFE
  VIEWER
}

enum UserApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ContractorType {
  CONTRACTOR
  SUBCONTRACTOR
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  HOSPITALITY
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  PENDING_APPROVAL
  APPROVED
  COMPLETED
}

enum RoomType {
  ENTRANCE
  FOYER
  STAIRCASE
  LIVING_ROOM
  DINING_ROOM
  KITCHEN
  STUDY_ROOM
  OFFICE
  PLAYROOM
  MASTER_BEDROOM
  GIRLS_ROOM
  BOYS_ROOM
  GUEST_BEDROOM
  POWDER_ROOM
  MASTER_BATHROOM
  FAMILY_BATHROOM
  GIRLS_BATHROOM
  BOYS_BATHROOM
  GUEST_BATHROOM
  LAUNDRY_ROOM
  SUKKAH
  BEDROOM
  BATHROOM
  FAMILY_ROOM
  HALLWAY
  PANTRY
  LAUNDRY
  MUDROOM
  CLOSET
  OUTDOOR
  OTHER
}

enum RoomStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  NEEDS_ATTENTION
}

enum StageType {
  DESIGN
  DESIGN_CONCEPT
  THREE_D
  CLIENT_APPROVAL
  DRAWINGS
  FFE
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  NEEDS_ATTENTION
  PENDING_APPROVAL
  REVISION_REQUESTED
  NOT_APPLICABLE
}

enum DesignSectionType {
  GENERAL
  WALL_COVERING
  CEILING
  FLOOR
}

enum TagType {
  MUST_HAVE
  OPTIONAL
  EXPLORE
  CUSTOM
}

enum FFEItemState {
  PENDING
  UNDECIDED
  SELECTED
  CONFIRMED
  NOT_NEEDED
  COMPLETED
}

enum FFETemplateStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum FFEInstanceStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum FFEItemVisibility {
  VISIBLE
  HIDDEN
}

enum FFEStatus {
  NOT_STARTED
  IN_PROGRESS
  SOURCING
  PROPOSED
  APPROVED
  ORDERED
  DELIVERED
  COMPLETED
  NOT_NEEDED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REVISION_REQUESTED
  EXPIRED
}

enum ClientApprovalStageStatus {
  DRAFT
  PENDING_AARON_APPROVAL
  READY_FOR_CLIENT
  SENT_TO_CLIENT
  CLIENT_REVIEWING
  FOLLOW_UP_REQUIRED
  CLIENT_APPROVED
  REVISION_REQUESTED
}

enum FloorplanApprovalStatus {
  DRAFT
  PENDING_AARON_APPROVAL
  READY_FOR_CLIENT
  SENT_TO_CLIENT
  CLIENT_REVIEWING
  FOLLOW_UP_REQUIRED
  CLIENT_APPROVED
  REVISION_REQUESTED
}

enum AssetType {
  IMAGE
  PDF
  DOCUMENT
  LINK
  RENDER
  DRAWING
  FLOORPLAN_PDF
  FLOORPLAN_CAD
  OTHER
}

enum NotificationType {
  STAGE_ASSIGNED
  STAGE_COMPLETED
  MENTION
  CHAT_MESSAGE
  DUE_DATE_REMINDER
  PROJECT_UPDATE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum RenderingVersionStatus {
  IN_PROGRESS
  COMPLETED
  PUSHED_TO_CLIENT
}

enum DrawingChecklistType {
  LIGHTING
  ELEVATION
  MILLWORK
  FLOORPLAN
  CUSTOM
}

enum IssueType {
  BUG
  FEATURE_REQUEST
  UPDATE_REQUEST
  GENERAL
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ProjectUpdateType {
  GENERAL
  PHOTO
  TASK
  DOCUMENT
  COMMUNICATION
  MILESTONE
  INSPECTION
  ISSUE
}

enum ProjectUpdateCategory {
  GENERAL
  PROGRESS
  QUALITY
  SAFETY
  BUDGET
  SCHEDULE
  COMMUNICATION
  APPROVAL
}

enum ProjectUpdateStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  REQUIRES_ATTENTION
}

enum PriorityLevel {
  URGENT
  HIGH
  MEDIUM
  LOW
  NORMAL
}

enum DocumentType {
  PLAN
  SPECIFICATION
  CHANGE_ORDER
  PERMIT
  INSPECTION_REPORT
  PHOTO
  VIDEO
  OTHER
}

enum MessageType {
  MESSAGE
  SYSTEM
  NOTIFICATION
  URGENT
  REMINDER
}

enum AssignmentStatus {
  ASSIGNED
  ACKNOWLEDGED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum NotificationMethod {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum MilestoneType {
  CUSTOM
  PHASE_COMPLETION
  CLIENT_APPROVAL
  INSPECTION
  DELIVERY
  PAYMENT
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum SpecBookSectionType {
  FLOORPLANS
  LIGHTING
  ELECTRICAL
  PLUMBING
  STRUCTURAL
  RCP
  ROOM
  DRAWINGS
}

enum SpecBookGenStatus {
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}
