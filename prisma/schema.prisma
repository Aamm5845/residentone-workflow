generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@unique([email, token])
}

model Organization {
  id           String        @id @default(cuid())
  name         String
  slug         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
  assets       Asset[]
  clients      Client[]
  contractors  Contractor[]
  projects     Project[]
  tags         Tag[]
  users        User[]
  issues       Issue[]
}

model User {
  id                         String                   @id @default(cuid())
  name                       String?
  email                      String                   @unique
  emailVerified              DateTime?
  image                      String?
  password                   String?
  role                       UserRole                 @default(DESIGNER)
  orgId                      String?
  mustChangePassword         Boolean                  @default(false)
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  accounts                   Account[]
  activities                 Activity[]
  activityLogs               ActivityLog[]
  decidedApprovals           Approval[]               @relation("DecidedByUser")
  sentApprovals              Approval[]               @relation("SentByUser")
  uploadedAssets             Asset[]
  assetPins                  AssetPin[]               @relation("UserAssetPins")
  assetTags                  AssetTag[]               @relation("UserAssetTags")
  completedChecklists        ChecklistItem[]          @relation("ChecklistCompletedBy")
  createdChecklists          ChecklistItem[]          @relation("ChecklistCreatedBy")
  createdClientAccessTokens  ClientAccessToken[]      @relation("ClientAccessTokenCreatedBy")
  clientApprovalActivities   ClientApprovalActivity[]
  aaronApprovalVersions      ClientApprovalVersion[]  @relation("ClientApprovalAaronApprovedBy")
  sentClientApprovalVersions ClientApprovalVersion[]  @relation("ClientApprovalSentBy")
  comments                   Comment[]
  commentPins                CommentPin[]             @relation("UserCommentPins")
  commentTags                CommentTag[]             @relation("UserCommentTags")
  commentLikes               CommentLike[]            @relation("UserCommentLikes")
  completedSections          DesignSection[]          @relation("CompletedByUserSection")
  createdSections            DesignSection[]          @relation("CreatedByUserSection")
  updatedSections            DesignSection[]          @relation("UpdatedByUserSection")
  createdFFEItems            FFEItem[]                @relation("CreatedByUserFFE")
  updatedFFEItems            FFEItem[]                @relation("UpdatedByUserFFE")
  notifications              Notification[]
  createdProjects            Project[]                @relation("CreatedByUser")
  updatedProjects            Project[]                @relation("UpdatedByUser")
  renderingNotes             RenderingNote[]
  completedRenderingVersions RenderingVersion[]       @relation("RenderingVersionCompletedBy")
  createdRenderingVersions   RenderingVersion[]       @relation("RenderingVersionCreatedBy")
  updatedRenderingVersions   RenderingVersion[]       @relation("RenderingVersionUpdatedBy")
  createdRooms               Room[]                   @relation("CreatedByUserRoom")
  updatedRooms               Room[]                   @relation("UpdatedByUserRoom")
  sessions                   Session[]
  assignedStages             Stage[]                  @relation("AssignedToUser")
  completedStages            Stage[]                  @relation("CompletedByUserStage")
  createdStages              Stage[]                  @relation("CreatedByUserStage")
  updatedStages              Stage[]                  @relation("UpdatedByUserStage")
  assignedTasks              Task[]
  reportedIssues             Issue[]                  @relation("IssueReporter")
  assignedIssues             Issue[]                  @relation("IssueAssignee")
  resolvedIssues             Issue[]                  @relation("IssueResolver")
  issueComments              IssueComment[]           @relation("IssueCommentAuthor")
  chatMessages               ChatMessage[]
  chatMentions               ChatMention[]
  organization               Organization?            @relation(fields: [orgId], references: [id], onDelete: Cascade)
  userSessions               UserSession[]
}

model Client {
  id           String       @id @default(cuid())
  name         String
  email        String
  phone        String?
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  company      String?
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  projects     Project[]

  @@unique([orgId, email])
}

model Contractor {
  id                 String              @id @default(cuid())
  businessName       String
  contactName        String?
  email              String
  phone              String?
  address            String?
  type               ContractorType      @default(CONTRACTOR)
  specialty          String?
  notes              String?
  isActive           Boolean             @default(true)
  orgId              String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  organization       Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  projectContractors ProjectContractor[]

  @@unique([orgId, email])
  @@index([orgId, type])
  @@index([orgId, isActive])
}

model ProjectContractor {
  id           String     @id @default(cuid())
  projectId    String
  contractorId String
  role         String?
  startDate    DateTime?
  endDate      DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  contractor   Contractor @relation(fields: [contractorId], references: [id], onDelete: Cascade)
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, contractorId])
  @@index([projectId])
  @@index([contractorId])
}

model Project {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  type               ProjectType         @default(RESIDENTIAL)
  status             ProjectStatus       @default(DRAFT)
  clientId           String
  dueDate            DateTime?
  budget             Float?
  dropboxFolder      String?
  orgId              String
  createdById        String
  updatedById        String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  coverImages        Json?
  address            String?
  approvals          Approval[]
  assets             Asset[]
  clientAccessTokens ClientAccessToken[]
  comments           Comment[]
  client             Client              @relation(fields: [clientId], references: [id])
  createdBy          User                @relation("CreatedByUser", fields: [createdById], references: [id])
  organization       Organization        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  updatedBy          User?               @relation("UpdatedByUser", fields: [updatedById], references: [id])
  projectContractors ProjectContractor[]
  rooms              Room[]
  tasks              Task[]
  issues             Issue[]
}

model Room {
  id                String             @id @default(cuid())
  projectId         String
  type              RoomType
  name              String?
  status            RoomStatus         @default(NOT_STARTED)
  currentStage      String?
  progressFFE       Int                @default(0)
  createdById       String?
  updatedById       String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  approvals         Approval[]
  assets            Asset[]
  comments          Comment[]
  ffeItems          FFEItem[]
  renderingVersions RenderingVersion[]
  createdBy         User?              @relation("CreatedByUserRoom", fields: [createdById], references: [id])
  project           Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  updatedBy         User?              @relation("UpdatedByUserRoom", fields: [updatedById], references: [id])
  stages            Stage[]
  tasks             Task[]
  issues            Issue[]
}

model Stage {
  id                     String                  @id @default(cuid())
  roomId                 String
  type                   StageType
  status                 StageStatus             @default(NOT_STARTED)
  assignedTo             String?
  dueDate                DateTime?
  startedAt              DateTime?
  completedAt            DateTime?
  createdById            String?
  updatedById            String?
  completedById          String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  activities             Activity[]
  assets                 Asset[]
  clientApprovalVersions ClientApprovalVersion[]
  comments               Comment[]
  designSections         DesignSection[]
  drawingChecklist       DrawingChecklistItem[]
  renderingVersions      RenderingVersion[]
  assignedUser           User?                   @relation("AssignedToUser", fields: [assignedTo], references: [id])
  completedBy            User?                   @relation("CompletedByUserStage", fields: [completedById], references: [id])
  createdBy              User?                   @relation("CreatedByUserStage", fields: [createdById], references: [id])
  room                   Room                    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedBy              User?                   @relation("UpdatedByUserStage", fields: [updatedById], references: [id])
  tasks                  Task[]
  issues                 Issue[]
  chatMessages           ChatMessage[]

  @@unique([roomId, type])
}

model DesignSection {
  id             String            @id @default(cuid())
  stageId        String
  type           DesignSectionType
  content        String?
  completed      Boolean           @default(false)
  createdById    String?
  updatedById    String?
  completedById  String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  assets         Asset[]
  checklistItems ChecklistItem[]
  comments       Comment[]
  completedBy    User?             @relation("CompletedByUserSection", fields: [completedById], references: [id])
  createdBy      User?             @relation("CreatedByUserSection", fields: [createdById], references: [id])
  stage          Stage             @relation(fields: [stageId], references: [id], onDelete: Cascade)
  updatedBy      User?             @relation("UpdatedByUserSection", fields: [updatedById], references: [id])

  @@unique([stageId, type])
}

model Tag {
  id           String       @id @default(cuid())
  name         String
  type         TagType      @default(CUSTOM)
  color        String?
  description  String?
  orgId        String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  assetTags    AssetTag[]
  commentTags  CommentTag[]
  organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, name])
  @@index([orgId])
}

model AssetTag {
  id        String   @id @default(cuid())
  assetId   String
  tagId     String
  userId    String
  createdAt DateTime @default(now())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation("UserAssetTags", fields: [userId], references: [id])

  @@unique([assetId, tagId])
  @@index([assetId])
  @@index([tagId])
}

model CommentTag {
  id        String   @id @default(cuid())
  commentId String
  tagId     String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentTags", fields: [userId], references: [id])

  @@unique([commentId, tagId])
  @@index([commentId])
  @@index([tagId])
}

model AssetPin {
  id        String   @id @default(cuid())
  assetId   String   @unique
  userId    String
  createdAt DateTime @default(now())
  asset     Asset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user      User     @relation("UserAssetPins", fields: [userId], references: [id])

  @@index([assetId])
}

model CommentPin {
  id        String   @id @default(cuid())
  commentId String   @unique
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentPins", fields: [userId], references: [id])

  @@index([commentId])
}

model CommentLike {
  id        String   @id @default(cuid())
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id])

  @@unique([userId, commentId])
  @@index([commentId])
}

model ChecklistItem {
  id            String        @id @default(cuid())
  sectionId     String
  title         String
  description   String?
  completed     Boolean       @default(false)
  order         Int           @default(0)
  createdById   String
  completedById String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  completedAt   DateTime?
  completedBy   User?         @relation("ChecklistCompletedBy", fields: [completedById], references: [id])
  createdBy     User          @relation("ChecklistCreatedBy", fields: [createdById], references: [id])
  section       DesignSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId])
  @@index([order])
}

model FFEItem {
  id           String    @id @default(cuid())
  roomId       String
  name         String
  status       FFEStatus @default(NOT_STARTED)
  supplierLink String?
  notes        String?
  price        Float?
  leadTime     String?
  category     String?
  createdById  String?
  updatedById  String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assets       Asset[]
  comments     Comment[]
  createdBy    User?     @relation("CreatedByUserFFE", fields: [createdById], references: [id])
  room         Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  updatedBy    User?     @relation("UpdatedByUserFFE", fields: [updatedById], references: [id])
}

model ClientApprovalVersion {
  id                  String                    @id @default(cuid())
  stageId             String
  renderingVersionId  String?                   @unique
  version             String
  status              ClientApprovalStageStatus @default(DRAFT)
  approvedByAaron     Boolean                   @default(false)
  aaronApprovedAt     DateTime?
  aaronApprovedById   String?
  sentToClientAt      DateTime?
  sentById            String?
  emailOpenedAt       DateTime?
  followUpCompletedAt DateTime?
  followUpNotes       String?
  clientDecision      ApprovalStatus?           @default(PENDING)
  clientDecidedAt     DateTime?
  clientMessage       String?
  notes               String?
  followUpSentAt      DateTime?
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  clientApprovals     ClientApproval[]
  activityLogs        ClientApprovalActivity[]
  assets              ClientApprovalAsset[]
  emailLogs           ClientApprovalEmailLog[]
  aaronApprovedBy     User?                     @relation("ClientApprovalAaronApprovedBy", fields: [aaronApprovedById], references: [id])
  renderingVersion    RenderingVersion?         @relation(fields: [renderingVersionId], references: [id])
  sentBy              User?                     @relation("ClientApprovalSentBy", fields: [sentById], references: [id])
  stage               Stage                     @relation(fields: [stageId], references: [id], onDelete: Cascade)
  newEmailLogs        EmailLog[]
}

model ClientApprovalAsset {
  id             String                @id @default(cuid())
  versionId      String
  assetId        String
  includeInEmail Boolean               @default(true)
  displayOrder   Int                   @default(0)
  createdAt      DateTime              @default(now())
  asset          Asset                 @relation(fields: [assetId], references: [id], onDelete: Cascade)
  version        ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@unique([versionId, assetId])
}

model ClientApprovalEmailLog {
  id              String                @id @default(cuid())
  versionId       String
  to              String
  subject         String
  htmlContent     String
  sentAt          DateTime              @default(now())
  openedAt        DateTime?
  clickedAt       DateTime?
  followUpSentAt  DateTime?
  trackingPixelId String                @unique
  version         ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model ClientApprovalActivity {
  id        String                @id @default(cuid())
  versionId String
  type      String
  message   String
  userId    String?
  metadata  String?
  createdAt DateTime              @default(now())
  user      User?                 @relation(fields: [userId], references: [id])
  version   ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model Approval {
  id             String         @id @default(cuid())
  projectId      String?
  roomId         String?
  token          String         @unique @default(cuid())
  status         ApprovalStatus @default(PENDING)
  sentById       String?
  decidedById    String?
  sentAt         DateTime?
  decidedAt      DateTime?
  message        String?
  revisionReason String?
  expiresAt      DateTime?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  decidedBy      User?          @relation("DecidedByUser", fields: [decidedById], references: [id])
  project        Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room           Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sentBy         User?          @relation("SentByUser", fields: [sentById], references: [id])
  assets         Asset[]
  comments       Comment[]
}

model Comment {
  id          String         @id @default(cuid())
  content     String
  authorId    String
  projectId   String?
  roomId      String?
  stageId     String?
  sectionId   String?
  ffeItemId   String?
  approvalId  String?
  mentions    String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  assets      Asset[]
  approval    Approval?      @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  author      User           @relation(fields: [authorId], references: [id])
  ffeItem     FFEItem?       @relation(fields: [ffeItemId], references: [id], onDelete: Cascade)
  project     Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room        Room?          @relation(fields: [roomId], references: [id], onDelete: Cascade)
  section     DesignSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  stage       Stage?         @relation(fields: [stageId], references: [id], onDelete: Cascade)
  commentPin  CommentPin?
  commentTags CommentTag[]
  commentLikes CommentLike[]
}

model ChatMessage {
  id          String        @id @default(cuid())
  content     String
  authorId    String
  stageId     String
  editedAt    DateTime?
  isEdited    Boolean       @default(false)
  deletedAt   DateTime?
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  stage       Stage         @relation(fields: [stageId], references: [id], onDelete: Cascade)
  mentions    ChatMention[]
  
  @@index([stageId, createdAt])
  @@index([authorId])
}

model ChatMention {
  id            String      @id @default(cuid())
  messageId     String
  mentionedId   String
  createdAt     DateTime    @default(now())
  message       ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  mentionedUser User        @relation(fields: [mentionedId], references: [id])
  
  @@unique([messageId, mentionedId])
}

model Asset {
  id                     String                @id @default(cuid())
  title                  String
  filename               String?
  url                    String
  type                   AssetType
  size                   Int?
  mimeType               String?
  provider               String?
  metadata               String?
  description            String?
  userDescription        String?
  uploadedBy             String
  orgId                  String
  projectId              String?
  roomId                 String?
  stageId                String?
  sectionId              String?
  ffeItemId              String?
  approvalId             String?
  commentId              String?
  renderingVersionId     String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  drawingChecklistItemId String?
  approval               Approval?             @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  comment                Comment?              @relation(fields: [commentId], references: [id], onDelete: Cascade)
  drawingChecklistItem   DrawingChecklistItem? @relation(fields: [drawingChecklistItemId], references: [id], onDelete: Cascade)
  ffeItem                FFEItem?              @relation(fields: [ffeItemId], references: [id], onDelete: Cascade)
  organization           Organization          @relation(fields: [orgId], references: [id], onDelete: Cascade)
  project                Project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  renderingVersion       RenderingVersion?     @relation(fields: [renderingVersionId], references: [id], onDelete: Cascade)
  room                   Room?                 @relation(fields: [roomId], references: [id], onDelete: Cascade)
  section                DesignSection?        @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  stage                  Stage?                @relation(fields: [stageId], references: [id], onDelete: Cascade)
  uploader               User                  @relation(fields: [uploadedBy], references: [id])
  assetPin               AssetPin?
  assetTags              AssetTag[]
  clientApprovalAssets   ClientApprovalAsset[]
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean          @default(false)
  relatedId   String?
  relatedType String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RoomPreset {
  id          String   @id @default(cuid())
  roomType    RoomType
  name        String
  description String?
  ffeItems    String
  sections    String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([roomType, name])
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  assignedTo  String?
  projectId   String?
  roomId      String?
  stageId     String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  assignee    User?      @relation(fields: [assignedTo], references: [id])
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room        Room?      @relation(fields: [roomId], references: [id], onDelete: Cascade)
  stage       Stage?     @relation(fields: [stageId], references: [id], onDelete: Cascade)
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  deviceId  String
  ipAddress String?
  userAgent String?
  lastSeen  DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId])
}

model EmailLog {
  id             String                @id @default(cuid())
  versionId      String
  to             String
  subject        String
  html           String
  sentAt         DateTime              @default(now())
  openedAt       DateTime?
  type           String
  metadata       Json?
  deliveryStatus String?               @default("PENDING") // PENDING, SENT, DELIVERED, FAILED, BOUNCED
  deliveryError  String?
  providerId     String?               // Message ID from email provider
  provider       String?               // resend, mailgun, smtp
  deliveredAt    DateTime?             // When provider confirmed delivery
  version        ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model ClientApproval {
  id         String                @id @default(cuid())
  versionId  String
  approvedBy String
  approvedAt DateTime              @default(now())
  decision   String
  comments   String?
  version    ClientApprovalVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

model Activity {
  id        String   @id @default(cuid())
  stageId   String
  type      String
  message   String
  userId    String?
  timestamp DateTime @default(now())
  stage     Stage    @relation(fields: [stageId], references: [id], onDelete: Cascade)
  user      User?    @relation(fields: [userId], references: [id])
}

model RenderingVersion {
  id                    String                 @id @default(cuid())
  roomId                String
  stageId               String
  version               String
  customName            String?
  status                RenderingVersionStatus @default(IN_PROGRESS)
  pushedToClientAt      DateTime?
  createdById           String
  updatedById           String?
  completedById         String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  completedAt           DateTime?
  assets                Asset[]
  clientApprovalVersion ClientApprovalVersion?
  notes                 RenderingNote[]
  completedBy           User?                  @relation("RenderingVersionCompletedBy", fields: [completedById], references: [id])
  createdBy             User                   @relation("RenderingVersionCreatedBy", fields: [createdById], references: [id])
  room                  Room                   @relation(fields: [roomId], references: [id], onDelete: Cascade)
  stage                 Stage                  @relation(fields: [stageId], references: [id], onDelete: Cascade)
  updatedBy             User?                  @relation("RenderingVersionUpdatedBy", fields: [updatedById], references: [id])

  @@unique([roomId, version])
  @@index([stageId])
  @@index([createdAt])
}

model RenderingNote {
  id        String           @id @default(cuid())
  versionId String
  content   String
  authorId  String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  author    User             @relation(fields: [authorId], references: [id])
  version   RenderingVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)

  @@index([versionId])
  @@index([createdAt])
}

model DrawingChecklistItem {
  id          String               @id @default(cuid())
  stageId     String
  type        DrawingChecklistType
  name        String
  description String?
  completed   Boolean              @default(false)
  order       Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  completedAt DateTime?
  assets      Asset[]
  stage       Stage                @relation(fields: [stageId], references: [id], onDelete: Cascade)

  @@unique([stageId, type])
  @@index([stageId])
  @@index([order])
}

model ActivityLog {
  id           String        @id @default(cuid())
  actorId      String?
  action       String
  entity       String
  entityId     String
  details      Json?
  ipAddress    String?
  orgId        String?
  createdAt    DateTime      @default(now())
  actor        User?         @relation(fields: [actorId], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id])

  @@index([actorId])
  @@index([orgId])
  @@index([entity, entityId])
  @@index([createdAt])
}

model ClientAccessToken {
  id             String            @id @default(cuid())
  projectId      String
  token          String            @unique @default(cuid())
  name           String?
  specsUrl       String?           // URL to 3rd party house specifications
  active         Boolean           @default(true)
  expiresAt      DateTime?
  createdById    String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  lastAccessedAt DateTime?
  accessCount    Int               @default(0)
  lastAccessedIP String?
  accessLogs     ClientAccessLog[]
  createdBy      User              @relation("ClientAccessTokenCreatedBy", fields: [createdById], references: [id])
  project        Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([token])
  @@index([active])
  @@index([expiresAt])
}

model ClientAccessLog {
  id        String            @id @default(cuid())
  tokenId   String
  ipAddress String?
  userAgent String?
  action    String
  metadata  Json?
  createdAt DateTime          @default(now())
  token     ClientAccessToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  @@index([tokenId])
  @@index([createdAt])
  @@index([action])
}

model Issue {
  id          String        @id @default(cuid())
  title       String
  description String
  type        IssueType     @default(GENERAL)
  priority    IssuePriority @default(MEDIUM)
  status      IssueStatus   @default(OPEN)
  reportedBy  String
  assignedTo  String?
  resolvedBy  String?
  orgId       String?
  projectId   String?
  roomId      String?
  stageId     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  resolvedAt  DateTime?
  closedAt    DateTime?
  metadata    Json?
  
  reporter    User          @relation("IssueReporter", fields: [reportedBy], references: [id])
  assignee    User?         @relation("IssueAssignee", fields: [assignedTo], references: [id])
  resolver    User?         @relation("IssueResolver", fields: [resolvedBy], references: [id])
  organization Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  room        Room?         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  stage       Stage?        @relation(fields: [stageId], references: [id], onDelete: Cascade)
  comments    IssueComment[]
  
  @@index([reportedBy])
  @@index([assignedTo])
  @@index([status])
  @@index([createdAt])
  @@index([orgId])
  @@index([projectId])
  @@index([roomId])
}

model IssueComment {
  id        String   @id @default(cuid())
  issueId   String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  author    User     @relation("IssueCommentAuthor", fields: [authorId], references: [id])
  
  @@index([issueId])
  @@index([createdAt])
}

enum UserRole {
  OWNER
  ADMIN
  DESIGNER
  RENDERER
  DRAFTER
  FFE
  VIEWER
}

enum ContractorType {
  CONTRACTOR
  SUBCONTRACTOR
}

enum ProjectType {
  RESIDENTIAL
  COMMERCIAL
  HOSPITALITY
}

enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  PENDING_APPROVAL
  APPROVED
  COMPLETED
}

enum RoomType {
  ENTRANCE
  FOYER
  STAIRCASE
  LIVING_ROOM
  DINING_ROOM
  KITCHEN
  STUDY_ROOM
  OFFICE
  PLAYROOM
  MASTER_BEDROOM
  GIRLS_ROOM
  BOYS_ROOM
  GUEST_BEDROOM
  POWDER_ROOM
  MASTER_BATHROOM
  FAMILY_BATHROOM
  GIRLS_BATHROOM
  BOYS_BATHROOM
  GUEST_BATHROOM
  LAUNDRY_ROOM
  SUKKAH
  BEDROOM
  BATHROOM
  FAMILY_ROOM
  HALLWAY
  PANTRY
  LAUNDRY
  MUDROOM
  CLOSET
  OUTDOOR
  OTHER
}

enum RoomStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  NEEDS_ATTENTION
}

enum StageType {
  DESIGN
  DESIGN_CONCEPT
  THREE_D
  CLIENT_APPROVAL
  DRAWINGS
  FFE
}

enum StageStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  NEEDS_ATTENTION
  PENDING_APPROVAL
  REVISION_REQUESTED
  NOT_APPLICABLE
}

enum DesignSectionType {
  GENERAL
  WALL_COVERING
  CEILING
  FLOOR
}

enum TagType {
  MUST_HAVE
  OPTIONAL
  EXPLORE
  CUSTOM
}

enum FFEStatus {
  NOT_STARTED
  IN_PROGRESS
  SOURCING
  PROPOSED
  APPROVED
  ORDERED
  DELIVERED
  COMPLETED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REVISION_REQUESTED
  EXPIRED
}

enum ClientApprovalStageStatus {
  DRAFT
  PENDING_AARON_APPROVAL
  READY_FOR_CLIENT
  SENT_TO_CLIENT
  CLIENT_REVIEWING
  FOLLOW_UP_REQUIRED
  CLIENT_APPROVED
  REVISION_REQUESTED
}

enum AssetType {
  IMAGE
  PDF
  DOCUMENT
  LINK
  RENDER
  DRAWING
  OTHER
}

enum NotificationType {
  STAGE_ASSIGNED
  STAGE_COMPLETED
  MENTION
  CHAT_MESSAGE
  DUE_DATE_REMINDER
  PROJECT_UPDATE
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum RenderingVersionStatus {
  IN_PROGRESS
  COMPLETED
  PUSHED_TO_CLIENT
}

enum DrawingChecklistType {
  LIGHTING
  ELEVATION
  MILLWORK
  FLOORPLAN
  CUSTOM
}

enum IssueType {
  BUG
  FEATURE_REQUEST
  UPDATE_REQUEST
  GENERAL
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
